########################################################################################################################
#                                                                                                                      #
# This file provides a template for core configuration properties for the DB sync receiver application, it contains    #
# in-line documentation for each property. For the spring core properties, please refer to the spring boot docs for    #
# more details.                                                                                                        #
#                                                                                                                      #
# NOTE: For the properties that have preset values, it's recommended not to change them unless you have to, some of    #
# them have placeholders of the form ${my.other.prop.key}, it means all you need to do is set values for the property  #
# key in this file named my.other.prop.key                                                                             #
#                                                                                                                      #
########################################################################################################################


# *********************** DB sync receiver properties ******************************************************************
#
eip.home=${home_dir}

camel.springboot.main-run-controller=true

# The unique identifier assigned to the OpenMRS instance associated to this application
db-sync.receiverId=${db_sync_receiverId}

# The interval in milliseconds between polls of the retry queue by the retry route
inbound.retry.interval=1800000

# The interval in milliseconds before the first poll of the retry queue by the retry route when the application starts.
inbound.retry.initial.delay=120000

# When set true, if a payload is received for an existing entity in the receiver database but no existing hash is found,
# it won't block processing of the message
receiver.ignore.missing.hash.for.existing.entity=true

# A comma separated list of site identifiers, items belonging to sites include in this list will not be processed by
# any sync related task, note that the identifiers are case sensitive.
#disabled.sites=
# ----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------


# ============================ Properties below to relate to actual message processing tasks ===========================

# ATTENTION!! The processor priority is such that syncing messages should be prioritized, below is the priority order
#
# 1 - Sync - HIGH
# 2 - Cache Eviction - MEDIUM
# 3 - Search Index update - MEDIUM
# 4 - Sending responses - LOW
# 5 - Archiving of synced items - LOW

#
# When configuring the properties below, the sync task should be given the highest priority while sending responses and
# archiving should have the least priority UNLESS requirements dictate otherwise e.g. if these other queues have way
# bigger backlogs and the sync queue is small.

# Number of threads to be used by sync tasks in parallel, defaults to the number of available CPU cores
#parallel.processing.thread.number=

# Number of sites to sync in parallel, defaults to 6, you should possibly not set this value
#sites.sync.parallel.size=

# Number of items to be read from the database by a sync task for processing for each execution, defaults to 1000
#sync.task.batch.size=

# The interval in milliseconds before the first run of each site parent task, defaults to 5 seconds.
#site.task.initial.delay=

# The interval in milliseconds between run of each site parent task, defaults to 5 minutes
#site.task.delay=

# The interval in milliseconds before the first poll of the jms message queue by the jms message task after startup,
# defaults to 5 seconds.
#jms.msg.task.initial.delay=

# The interval in milliseconds between polls of the jms message queue by the jms message tasks, defaults to 30 seconds.
#jms.msg.task.delay=

# A comma separated list of tasks to disable, possible values are SYNCHRONIZER, CACHE_EVICTOR, SEARCH_INDEX_UPDATER,
# RESPONSE_SENDER, ARCHIVER, DELETER. The values MUST be in uppercase
#site.disabled.tasks=

# When set to true, the receiver will stop receiving messages from the message broker, defaults to false.
#jms.msg.listener.disabled=

# When set to true, the receiver will stop processing items from the JMS queue, defaults to false.
#jms.task.disabled=

# When set to false, disables checks for messages in the JMS queue with duplicate message ids in the management DB, this
# can speed up the reading of new messages from the message broker, note that when set to false it means if a duplicate
# message id is encountered, an exception is thrown and receiver shuts down, this should be set to true to resolve the
# issue by skipping the duplicate message. Defaults to true.
#jms.skip.duplicates=
# ----------------------------------------------------------------------------------------------------------------------


# *********************************************** Sync Reconciliation **************************************************

# Spring cron expression used to schedule the reconciliation process, please refer to spring's documentation for cron
# expressions. To disable, leave the value blank.
# reconcile.schedule.cron=

# The interval in milliseconds before the first poll of the reconcile queue after startup, defaults to 5 seconds.
# It is the task that processes the entire reconciliation iteration.
#reconcile.initial.delay=

# The interval in milliseconds between polls of the reconcile queue, defaults to 5 minutes.
#reconcile.delay=

# The interval in milliseconds before the first poll of the reconcile message queue task after startup, defaults to 5
# seconds. It is the task the processes individual reconciliation payloads.
#reconcile.msg.initial.delay=

# The interval in milliseconds between polls of the reconcile message queue, defaults to 5 minutes.
#reconcile.msg.delay=

# Specifies the number of uuids to tell remote sites to send in a single batch for reconciliation
#reconcile.batch.size=

# Specifies the minimum number of uuids to reconcile in a batch, whenever the processor encounters a batch containing a
# missing uuid, it splits a batch into half and inspects the halves, this process is repeated until the individual
# halves contain uuids less than this number, after which the remaining uuids are processed individually.
#reconcile.process.min.batch.size=

# Specifies the maximum number of uuids to reconcile in a batch
#reconcile.process.max.batch.size=
# ----------------------------------------------------------------------------------------------------------------------



# ***************************************** Sync Prioritization(ADVANCED) **********************************************

# Turns on/off the feature where the processor for messages in the sync queue is prioritized over others to help cut
# down on a growing sync queue, defaults to false
#sync.prioritize.disabled=

# The number of days worth in terms of sync time after which the application starts to prioritize item syncing, in
# practice the value should be based on statistics from production, this value along with other factors is used by the
# application to compute a default count of items in the sync after which the sync prioritization feature kicks in,
# defaults to 2 days
#sync.prioritize.backlog.threshold.days=

# The count of items in the sync queue after which the prioritization feature kicks in, setting a value for this
# property nullifies the value for the sync.prioritize.backlog.threshold.days property, default value is computed
# based on some factors e.g. number of CPU cores, sync.prioritize.backlog.threshold.days and time it takes to process
# a single sync item
#sync.prioritize.threshold=

# The sync prioritization feature periodically polls the sync queue to query the count of items to determine when to
# kick in, to minimise these database queries the count is cached, this value defines the time to live in milliseconds
# of the count in the cache, defaults to 1hr
#sync.prioritize.count.cache.ttl=
# ----------------------------------------------------------------------------------------------------------------------

# ========================================= Sync Archives Pruning (Permanent Removal) ==================================

# Enables or disables the sync archives pruner task, defaults to false
archives.pruner.task.enabled=true

# Specifies the maximum age in days after which old receiver sync archives will be pruned
archives.pruner.max.age.days=30

# The interval in milliseconds before the first poll of the sync archive queue by the pruner task after startup,
# defaults to 60 seconds.
archives.pruner.initial.delay=120000

# The interval in milliseconds between polls of the sync archive queue by the pruner tasks, defaults to 1 day
#archives.pruner.delay=

# ----------------------------------------------------------------------------------------------------------------------


# *********************** Logging Configuration ************************************************************************
#
# Uncomment this to use console logging otherwise defaults to the logback.xml file located on the classpath which is
# configured to log to ${eip.home}/logs/openmrs-eip.log
logging.config=file:logback-spring.xml

# Logging level for the application loggers (all built-in routes and classes)
openmrs.eip.log.level=INFO

# Logging level for ONLY application class loggers, feel free to add more logger configurations
logging.level.org.openmrs.eip=${openmrs.eip.log.level}
logging.level.receiver-main=${openmrs.eip.log.level}
logging.level.inbound-db-sync=${openmrs.eip.log.level}
logging.level.inbound-logger=${openmrs.eip.log.level}
logging.level.inbound-error-handler=${openmrs.eip.log.level}
logging.level.receiver-retry=${openmrs.eip.log.level}
logging.level.message-processor=${openmrs.eip.log.level}
logging.level.receiver-request-processor=${openmrs.eip.log.level}
logging.level.receiver-update-search-index=${openmrs.eip.log.level}
logging.level.receiver-clear-db-cache=${openmrs.eip.log.level}
logging.level.org.mz.csaude.dbsynfeatures.notifications=${openmrs.eip.log.level}

# ----------------------------------------------------------------------------------------------------------------------


# *********************** Tomcat Configuration *************************************************************************
#
# Server HTTP port, the H2 database console is exposed at this port
server.port=${server_port}
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Receiver camel routes location ***************************************************************
#
# Location of the Camel routes xml files
camel.springboot.routes-include-pattern=file:routes${file.separator}*.xml
# ----------------------------------------------------------------------------------------------------------------------


# *********************** OpenMRS Webapp Configuration *****************************************************************
#
# The purpose of this config is so that the receiver sync app can make a rest call to trigger search index rebuild
# it processes a payload for an indexed entity e.g. person_name, person_attribute, patient_identifier etc.
# It's highly recommended that you create a specific user account for use here
#
# The base URL to the receiving OpenMRS webapp
openmrs.baseUrl=http://openmrs-central:8080/openmrs

# The username for the account to use to log into the receiver OpenMRS instance
openmrs.username=${openmrs_username}

# The password for the account to use to log into the receiver OpenMRS instance
openmrs.password=${openmrs_password}

# *********************** Configuration of the openMRS database to write to *******************************************
#
# The IP address or host name of the OpenMRS MySQL database
openmrs.db.host=${openmrs_db_host}

# The OpenMRS MySQL database port
openmrs.db.port=${openmrs_db_port}

# The OpenMRS MySQL database name
openmrs.db.name=${openmrs_db_name}
# ---------------------------------------------------------------------------------------------------------------------

#********************************Hikari configuration*******************************************************************
datasource.maximumPoolSize=350
spring.openmrs-datasource.maximumPoolSize=${datasource.maximumPoolSize}
spring.mngt-datasource.maximumPoolSize=${datasource.maximumPoolSize}
server.tomcat.threads.max=300
#-----------------------------------------------------------------------------------------------------------------------


# *********************** OpenMRS Datasource config ********************************************************************
#
# Driver class of the openMRS datasource
spring.openmrs-datasource.driverClassName=com.mysql.cj.jdbc.Driver

# Dialect of the openMRS datasource (should not be changed in a usual use)
spring.openmrs-datasource.dialect=org.hibernate.dialect.MySQLDialect

# Url of the openMRS datasource, you don't have to change this value as long you've set the placeholder property values
spring.openmrs-datasource.jdbcUrl=jdbc:mysql://${openmrs.db.host}:${openmrs.db.port}/${openmrs.db.name}?useSSL=false

# User name of the openMRS datasource
spring.openmrs-datasource.username=${spring_openmrs_datasource_user}

# Password of the openMRS datasource
spring.openmrs-datasource.password=${spring_openmrs_datasource_password}
# ----------------------------------------------------------------------------------------------------------------------

# *********************** Configuration of the dbsync mgt database to write to *******************************************
#
# The IP address or host name of the dbsync mgt MySQL database
dbsync.db.host=${dbsync_db_host}

# The dbsync mgt MySQL database port
dbsync.db.port=${dbsync_db_port}

# The dbsync mgt MySQL database name
dbsync.db.name=${dbsync_db_name}


# *********************** Configuration of the Management database *****************************************************
#
# Driver class of the management datasource (should not be changed in a usual use)
spring.mngt-datasource.driverClassName=com.mysql.cj.jdbc.Driver

# Dialect of the management datasource (should not be changed in a usual use)
spring.mngt-datasource.dialect=org.hibernate.dialect.MySQLDialect

# Url of the management datasource
spring.mngt-datasource.jdbcUrl=jdbc:mysql://${dbsync.db.host}:${dbsync.db.port}/${dbsync_db_name}?createDatabaseIfNotExist=true

# User name of the management datasource
spring.mngt-datasource.username=${spring_openmrs_datasource_user}

# Password of the management datasource
spring.mngt-datasource.password=${spring_openmrs_datasource_password}
# ----------------------------------------------------------------------------------------------------------------------


# *********************** ActiveMQ configuration ***********************************************************************
#
# Broker URL of the Artemis MQ broker shared with the receiver (SHOULD include the protocol e.g. tcp://192.168.1.2:61616)
#spring.artemis.brokerUrl=tcp://artemis:61616
#
# Artemis broker port
spring.artemis.host=${spring_artemis_host}

# Artemis broker port
spring.artemis.port=${spring_artemis_port}

# User name of the Artemis broker
spring.artemis.user=${spring_artemis_user}
#

# Password of the Artemis broker
spring.artemis.password=${spring_artemis_password}

# Enable SSL for MQ transport layer
artemis.ssl.enabled=false

# The maximum wait in milliseconds between reconnection attempts to activeMQ, defaults to 30 minutes
max.reconnect.delay=900000
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Configuration of the ArtemisMQ endpoint to read from inbound DB sync payloads ****************
# Use either one of the following confs. JMS endpoint if activeMQ is configured or file endpoint for TESTING purposes
# Camel JMS Endpoint e.g. activemq:topic:<topic-name> or FILE Endpoint e.g. file:<folderPath> Should be absolute path
sync.queue.name=openmrs.dbsync
activemq.clientId=DB-SYNC-REC
# ----------------------------------------------------------------------------------------------------------------------

# ******************** Configuration of the ArtemisMQ endpoint to send payloads. ***************************************
# Camel JMS Endpoint e.g. activemq:<queue-name>.myRemoteSiteId, {0} is the senderId, and will be set dynamically in runtime
camel.output.endpoint=activemq:openmrs.sync.{0}
# ----------------------------------------------------------------------------------------------------------------------




#************************************************* NOTIFICATION DESTINATION CONFIGURATION *******************************************************************************************************************************
artemis.dbsync.notifications.endpoint=activemq:dbsync.notifications?connectionFactory=activeMqConnFactory&acknowledgementModeName=CLIENT_ACKNOWLEDGE&messageListenerContainerFactory=customMessageListenerContainerFactory

# ----------------------------------------------------------------------------------------------------------------------

################################################################## CENTRALIZATION FEATURES DATASOURCE ########################################################
spring.datasource.centralization.features.url=jdbc:mysql://${openmrs.db.host}:${openmrs.db.port}/centralization_features_mgt_db?createDatabaseIfNotExist=true
spring.datasource.centralization.features.username=root
spring.datasource.centralization.features.password=${spring_openmrs_datasource_password}
spring.mngt-datasource.centralization.features.driver-class-name=com.mysql.cj.jdbc.Driver
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

##******************************************************* UPDATES MANAGER PROPS *********************************************************************
## Central server
artemis.dbsync.central.updates.endpoint=activemq:topic:db_sync_updates
artemis.dbsync.update.response.endpoint=activemq:db_sync_update_response
share.update.root.folder=${eip.home}${file.separator}shared${file.separator}dbsync${file.separator}updates
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ******************************************** SMPT Configurations  ****************************************************
#
#The sender email
smtp.auth.user=${dbsync_notification_email_smtp_auth_user}

#The sender auth pass
smtp.auth.pass=${dbsync_notification_email_smtp_user_pass}
#
#The SMTP host name
smtp.host.name=${dbsync_notification_email_smtp_host_name}
#
#The SMTP host port
smtp.host.port=${dbsync_notification_email_smtp_host_port}
#---------------------------------------------------------------------------------------------------------------------------------

